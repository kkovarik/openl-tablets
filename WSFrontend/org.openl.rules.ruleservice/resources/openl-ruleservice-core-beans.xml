<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="org.openl.rules.ruleservice.core.RuleServiceStaticConfigurationUtil.setMaxThreadsForCompile"
          class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod"
                  value="org.openl.rules.ruleservice.core.RuleServiceStaticConfigurationUtil.setMaxThreadsForCompile"/>
        <property name="arguments" value="${ruleservice.instantiation.strategy.maxthreadsforcompile}"/>
    </bean>

    <bean id="ruleServiceInstantiationFactory"
          class="org.openl.rules.ruleservice.core.RuleServiceOpenLServiceInstantiationFactoryImpl"
          depends-on="org.openl.rules.ruleservice.core.RuleServiceStaticConfigurationUtil.setMaxThreadsForCompile"
          autowire="byType">
        <property name="ruleServiceLoader" ref="ruleServiceLoader"/>
        <property name="externalParameters">
            <props>
                <prop key="dispatching.validation">${dispatching.validation}</prop>
            </props>
        </property>
    </bean>

    <!-- Controls all services currently exposed.
    Listens the data source changes and handles all deploy/redeploy/undelpoy operations.  -->
    <bean id="serviceManager" class="org.openl.rules.ruleservice.management.ServiceManagerImpl">
        <property name="serviceConfigurer" ref="serviceConfigurer"/>
        <property name="ruleServiceInstantiationFactory" ref="ruleServiceInstantiationFactory"/>
        <property name="ruleServiceLoader" ref="ruleServiceLoader"/>
    </bean>

    <bean id="serviceDescriptionInProcess" factory-bean="serviceManager" factory-method="getServiceDescriptionInProcess"
          scope="prototype"/>

    <!-- Determines the services that should be exposed using RulesLoader. -->
    <bean id="serviceConfigurer" class="org.openl.rules.ruleservice.conf.LastVersionProjectsServiceConfigurer">
        <property name="provideRuntimeContext" value="${ruleservice.isProvideRuntimeContext}"/>
        <property name="supportedGroups" value="${ruleservice.datasource.groups}"/>
        <property name="datasourceDeploymentPatterns" value="${ruleservice.datasource.deployments}"/>
        <property name="defaultPublishers" value="${ruleservice.publishers:}"/>
    </bean>

    <bean id="serviceManagerStarter" class="org.openl.rules.ruleservice.conf.ServiceManagerStarterBean"
          depends-on="serviceManager" lazy-init="false">
        <property name="serviceManager" ref="serviceManager"/>
    </bean>

    <!-- Simple front end to access all services. -->
    <bean id="frontend" class="org.openl.rules.ruleservice.simple.RulesFrontendImpl"/>

    <!-- Initializes OpenL Engine instances according to Rule Services configuration
        description and calls DeploymentAdmin to expose corresponding web service. -->
    <bean class="org.openl.rules.ruleservice.simple.JavaClassRuleServicePublisher">
        <property name="frontend" ref="frontend"/>
    </bean>
</beans>
