<?xml version="1.0" encoding="UTF-8"?>
<ui:composition
        xmlns:f="http://java.sun.com/jsf/core"
        xmlns:rich="http://richfaces.org/rich"
        xmlns:ui="http://java.sun.com/jsf/facelets"
>

    <style>
        #groupsTable > div:nth-child(2) {
            display: none;
        }

        #groupsTable {
            display: table;
        }

        #groupsTable .row {
            display: table-row;
        }

        #groupsTable .row > div {
            padding: 6px 11px;
            text-align: left;
            display: table-cell;
            border-bottom: 1px dotted #ccc;
        }

        #groupsTable header {
            font-weight: bold;
        }

        #groupsTable header.row > div {
            border-bottom: 1px solid #ccc;
        }

        #groupsTable .privilege {
            background: #999;
            border-radius: 1px;
            color: #fff;
            font-size: 9px;
            font-weight: bold;
            padding: 3px 6px;
            white-space: nowrap;
            text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);
            vertical-align: 12%;
            margin-right: 2px;
            margin-bottom: 3px;
            display: inline-block;
        }

        #groupsTable .privilege.admin {
            background: #f54;
        }

        #groupsTable .name.admin {
            color: #f54;
        }

        #groupsTable div.row:hover {
            background-color: #FAE5C1;
        }

        #privilegesTable label {
            width: 215px;
            display: inline-table;
            margin-top: 7px;
            cursor: pointer;
        }

        #privilegesTable > div:first-child {
            font-weight: bold;
        }

        .align-middle {
            vertical-align: middle;
        }

    </style>

    <section id="groupsTable">
        <header class="row">
            <div>Name</div>
            <div>Description</div>
            <div>Design Repository role</div>
            <div>Deploy Repository role</div>
            <div>Action</div>
        </header>
        <div class="row {type}">
            <div class="align-middle"><span class="clickable name {isAdmin}">{name}</span></div>
            <div class="align-middle"><span class="description">{description}</span></div>
            <div class="align-middle"><span class="design {hasDesign}">{design}</span></div>
            <div class="align-middle"><span class="deployConfig {hasDeployConfig}">{deployConfig}</span></div>
            <div class="align-middle"><span class="clickable delete-icon"/></div>
        </div>
    </section>
    <br/>
    <br/>

    <a href="javascript:void(0)" id="addNewGroup">Add New Group</a>

    <rich:popupPanel id="modalAddEditGroup" autosized="true" minWidth="480" maxWidth="480">
        <f:facet name="header">Edit Group</f:facet>

        <f:facet name="controls">
            <span class="close-icon clickable icon-small" onclick="hideAddGroup()" style="margin: 8px 4px;"/>
        </f:facet>

        <form id="addEditGroupForm" style="height: 220px; overflow: auto;">
            <table cellspacing="5">
                <tr>
                    <td>
                        <label class="required">Name:</label>
                    </td>
                    <td>
                        <input type="hidden" name="oldName"/>
                        <input type="text" name="name" style="margin-right: 7px;" maxlength="65"/>
                        <span class="error"/>
                    </td>
                </tr>
                <tr>
                    <td>
                        <label>Description:</label>
                    </td>
                    <td style="width: 100%; padding-right: 11px">
                        <input type="text" name="description" style="width: 100%" maxlength="200"/>
                    </td>
                </tr>
                <tr>
                    <td>
                        <label>Administrate:</label>
                    </td>
                    <td>
                        <input type="checkbox" name="admin"/>
                    </td>
                </tr>
                <tr class="rolesTable">
                    <td colspan="2">Repository roles:</td>
                </tr>
                <tr class="rolesTable">
                    <td colspan="2">
                        <table>
                            <tr>
                                <td>Design:</td>
                                <td repoType="design"></td>
                            </tr>
                            <tr>
                                <td>Deploy:</td>
                                <td repoType="deployConfig"></td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
        </form>

        <footer>
            <input type="button" value="Save" class="button-primary" onclick="saveGroup()"/>
            <input type="button" value="Cancel" onclick="hideAddGroup()"/>
        </footer>

    </rich:popupPanel>

    <script>
        //<![CDATA[
        let autocompleteXhr = null;

        ws.form.autocomplete({
            $input: $j("#addEditGroupForm input[name=name]"),
            delay: 500,
            source: (request, response) => {
                autocompleteXhr = $j.ajax({
                    type: "GET",
                    url: "#{contextPath}/web/admin/management/groups/external",
                    data: {
                        search: request.term
                    },
                    datatype: "json",
                    beforeSend: function () {
                        if (autocompleteXhr != null) {
                            autocompleteXhr.abort();
                        }
                    }
                }).done(function (data) {
                    let items = [];
                    data.forEach((val) => {
                        items.push({value: val});
                    });
                    response(items);
                })
            }
        })

        var groups = {};
        var roles = {};

        $j.ajax({
            url: "#{contextPath}/web/admin/management/roles",
            async: false,
            datatype: "json"
        }).done(function (data) {
            roles = data;
        });

        (function () {

            var onlyAdmin = "";

            function renderGroupsTable(data) {
                var admins = 0;
                var rowTemplate = $j('#groupsTable>div:nth-child(2)');
                var htmlTemplate = $j('<div/>').append(rowTemplate).html();
                var list = htmlTemplate;
                $j('#groupsTable div.row').remove();

                $j.each(data, function (name, item) {
                    var privs = "";
                    let isAdmin = false;
                    item.privileges && item.privileges.sort().forEach(function (priv) {
                        if (priv === "ADMIN") {
                            admins++;
                            onlyAdmin = name;
                            isAdmin = true;
                        }
                    });

                    let repositoryTypeToRole = item.repositoryTypeToRole || {};
                    list += htmlTemplate
                        .replaceString(/{type}/g, onlyAdmin === name ? "onlyAdmin" : "")
                        .replaceString(/{isAdmin}/g, isAdmin ? "admin" : "")
                        .replaceString(/{name}/g, ws.utils.escapeHtml(name))
                        .replaceString(/{description}/g, ws.utils.escapeHtml(item.description))
                        .replaceString(/{hasDesign}/g, repositoryTypeToRole.design ? "privilege" : "")
                        .replaceString(/{design}/g, ws.utils.escapeHtml(roles[repositoryTypeToRole.design]))
                        .replaceString(/{deployConfig}/g, ws.utils.escapeHtml(roles[repositoryTypeToRole.deployConfig]))
                        .replaceString(/{hasDeployConfig}/g, repositoryTypeToRole.deployConfig ? "privilege" : "")
                        .replaceString(/{privileges}/g, privs);
                });
                $j('#groupsTable').append(list);
                $j('#groupsTable').show();
                if (admins !== 1) {
                    onlyAdmin = "";
                } else {
                    $j('#groupsTable .onlyAdmin .delete-icon').addClass("disabled");
                }
                $j('#groupsTable').removeClass("onlyAdmin");
            }

            // Show groups in the table
            $j('#groupsTable').bind('refresh', function () {
                $j.ajax({
                    url: "#{contextPath}/web/admin/management/old/groups",
                    datatype: "json"
                })
                    .done(function (data) {
                        renderGroupsTable(data);
                        groups = data;
                    });
            });

            // Delete a group
            $j('#groupsTable').on("click", ".clickable.delete-icon", function (e) {
                e.preventDefault();

                if (!window.confirm('Are you sure you want to delete the group?')) {
                    return false;
                }

                var row = $j(this).closest(".row");
                var name = $j(row).find(".name").text();
                $j.ajax({
                    type: "DELETE",
                    url: "#{contextPath}/web/admin/management/groups/" + groups[name].id
                }).done(function () {
                    $j('#groupsTable').trigger('refresh');
                    location.reload();
                }).fail(function () {
                    ws.ui.error("Could not delete");
                    $j('#groupsTable').trigger('refresh');
                });

            });

            // Edit a group
            $j('#groupsTable').on("click", ".clickable.name", function (e) {
                e.preventDefault();
                var el = $j(this);
                var name = el.text();
                editGroup(name, groups[name].description, name === onlyAdmin);
            });

            // Add a new group
            $j('#addNewGroup').on("click", function (e) {
                e.preventDefault();
                editGroup();
            });

            $j('#groupsTable').trigger('refresh');

            function editGroup(name, description, isOnlyAdmin) {
                $j("#addEditGroupForm .error").text("");
                $j("#addEditGroupForm input[name=name]").val(name);
                $j("#addEditGroupForm input[name=oldName]").val(name);
                $j("#addEditGroupForm input[name=description]").val(description);
                $j("#modalAddEditGroup_header_content").text(name !== undefined ? "Edit Group" : "Add New Group");

                let rolesHtml = $j('<select></select>');
                rolesHtml.append($j('<option></option>').val("").text("").prop("selected", true));
                $j.each(roles, (value, text) => {
                    const option = $j('<option></option>').val(value).text(text);
                    rolesHtml.append(option);
                });
                let deployConfigRolesHtml = rolesHtml.clone();
                deployConfigRolesHtml.attr("name", "deployConfigRole");
                $j('#addEditGroupForm [repoType="deployConfig"]').html(deployConfigRolesHtml);
                let designRolesHtml = rolesHtml.clone();
                designRolesHtml.attr("name", "designRole");
                $j('#addEditGroupForm [repoType="design"]').html(designRolesHtml);

                var group = groups[name];
                if (group) {
                    let repositoryTypeToRole = group.repositoryTypeToRole;
                    if (repositoryTypeToRole && repositoryTypeToRole.design) {
                        $j('#addEditGroupForm [repoType="design"] option[value="' + repositoryTypeToRole.design + '"]').prop("selected", true);
                    }
                    if (repositoryTypeToRole && repositoryTypeToRole.deployConfig) {
                        $j('#addEditGroupForm [repoType="deployConfig"] option[value="' + repositoryTypeToRole.deployConfig + '"]').prop("selected", true);
                    }
                }
                $j("#addEditGroupForm input[name=admin]").prop("checked", (group?.privileges && group.privileges.includes("ADMIN")) || false);
                $j("#addEditGroupForm input[name=admin]").off("change").on("change", function () {
                    var isChecked = $j(this).is(":checked");
                    $j('#addEditGroupForm .rolesTable select').prop("disabled", isChecked);
                });
                $j("#addEditGroupForm input[name=admin]").trigger("change");
                $j("#addEditGroupForm input[name=admin]").prop("disabled", isOnlyAdmin || false);

                RichFaces.$("modalAddEditGroup").show();
            }

        })();

        function hideAddGroup() {
            $j('#groupsTable').trigger('refresh');
            RichFaces.$("modalAddEditGroup").hide();
        }

        function saveGroup() {
            var name = $j("#addEditGroupForm input[name=name]").val();

            var isBlank = !name || /^\s*$/.test(name);

            if (isBlank) {
                $j("#addEditGroupForm .error").text("Cannot be empty");
                return;
            } else {
                $j("#addEditGroupForm .error").text("");
            }
            $j("#addEditGroupForm input[name=admin]").prop("disabled", false);
            $j.ajax({
                type: "POST",
                url: "#{contextPath}/web/admin/management/groups",
                data: $j("#addEditGroupForm").serialize(),
            }).done(function () {
                $j('#groupsTable').trigger('refresh');
                RichFaces.$("modalAddEditGroup").hide();
                location.reload();
            }).fail(function (response) {
                let json = JSON.parse(response.responseText);
                if (json && json.message) {
                    ws.ui.error(json.message);
                } else {
                    ws.ui.error("Could not save.")
                }
                $j('#groupsTable').trigger('refresh');
            });
        }

        //]]>
    </script>

</ui:composition>
